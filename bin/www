#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sockets:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io        = require('socket.io').listen(server)

// this will store all the usernames and their socket.id
var usernames = {}
var messages  = []
var rooms     =[{
                room: 'mainroom',
                users: [],
                messages: []
                },
                {
                room: 'podcasts',
                users: [],
                messages: []
                }]
// socket Code will be written here
io.sockets.on('connect', function(socket){
  console.log('connected')


    function findIndexOfCurrentRoom(){
        for(var i=0; i <rooms.length; i++){
          var indexOfRoom;
              if(rooms[i].room.indexOf(socket.currentRoom) != -1){
              indexOfRoom = i
               console.log(i, ' this is hitting -1', socket.currentRoom)
               return indexOfRoom
              }
          }
      }

  // emit all messages as soon as user connects


  // reserverd listeners
  socket.on('disconnect', function(){
    delete usernames[socket.username]
    io.sockets.emit('users', Object.keys(usernames))
  })



  // this is setting up a listener
  socket.on('addUser', function(username){
    console.log(username)
    // storing their name as the key and socket.id as value
    usernames[username] = socket.id;
    socket.username = username;
    // were going to send to every socket connection the users array
    socket.join(rooms[0].room)
    //set the current room for the socket
    socket.currentRoom = rooms[0].room
    rooms[0].users.push(socket.username);
    io.sockets.emit('users', rooms[0].users, rooms[0].room)
    socket.broadcast.emit('all messages', messages)
    socket.emit('all messages', messages, socket.username)
    io.sockets.emit('rooms', rooms)
  })

  // listening for messages
  socket.on('message', function(message){
    console.log(message)

    var indexOfRoom = findIndexOfCurrentRoom();


    console.log(indexOfRoom)
    var obj = {};
    obj.username = socket.username
    obj.message  = message;
    rooms[indexOfRoom].messages.push(obj)
    console.log(rooms[indexOfRoom].messages, ' this is messages')
    io.sockets.to(rooms[indexOfRoom].room).emit('all messages', rooms[indexOfRoom].messages)

  })

  socket.on('join room', function(roomName){
    console.log(roomName, ' this is roomName')
    console.log(socket.rooms, 'socketsssss')



    for (var i=0; i < rooms.length; i++){



      if(roomName === rooms[i].room){

        var indexOfPrevious = findIndexOfCurrentRoom();
        socket.leave(socket.currentRoom)
        // console.log(indexOfRoom, ' indexofRoom')
        var indexOfUser = rooms[indexOfPrevious].users.indexOf(socket.username);
        rooms[indexOfPrevious].users.splice(indexOfUser, 1)
        io.sockets.to(socket.currentRoom).emit('users', rooms[indexOfPrevious].users, socket.currentRoom)

        if(rooms[i].room.indexOf(socket.username) === -1){
            socket.join(roomName)


            // var indexOfUser = rooms[i].users.indexOf(socket.username);
            // rooms[i].users.splice(indexOfUser, 1)
            socket.currentRoom = roomName;

            console.log(socket.currentRoom, 'scoket current room')
            rooms[i].users.push(socket.username)
            console.log('if is happening', rooms[i].users, roomName)
            io.sockets.to(roomName).emit('all messages', rooms[i].messages)
            io.sockets.to(roomName).emit('users', rooms[i].users, socket.currentRoom)

        }
      }
    }// end of loop




  })




})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
